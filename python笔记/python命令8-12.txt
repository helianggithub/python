创建函数--def 函数名称():

判断函数是否可以调用--callable()

获取全局变量值--globals()

获取全局变量的字典--vars()

声明局部变量为全局变量--global

返回--return

主程序函数--main()

调用主程序函数代码--if __name__=="__main__": 

添加到函数末尾获取用户任意值(需要关键词)保存在字典内--**kwargs

添加到函数末尾获取用户任意值(不需要关键词)保存在元组内--*args

创建字典(花括号)--={}

把序列或参数创建为字典--dict()

把对象的所有属性转换为字典--vars()

清空字典--.clear()

浅复制字典--.copy()

深复制，copy模块中的deepcopy函数--deepcopy()

使用给定的键建立新字典--.fromkeys()

更宽松的访问字典--.get()

类似于get(),除此之外还能添加不含给定键值的情况下添加键值--.setdefault()

判断键是否在字典中，是返回Turn，否返回False--has_key()

可以用一个字典更新另一个字典--.update()

将字典所有项以列表形式返回--.items()

弹出（删除）字典的随机项--.popitem()

将字典所有项以迭代器对象形式返回--.iteritems()

将字典中的键以列表形式返回--.keys()

将字典中的键以迭代器形式返回--.iterkeys()

删除字典中的键/值--pop()

返回字典中所有(值)的列表--.values()

返回字典中所有(值)的迭代器--.iterbalues()

返回字典中所有(键)的列表--keys()

创建类--class 类名称(object):

调用函数返回的对象的任何方法都是超类的方法--super()    super(c3,self).__init__()  c3--继承类

property()函数--class Rectangle(object):
    			def __init__(self):                              >>> r=Rectangle()
				self.width=0				 >>> r.width=10
				self.height=0				 >>> r.height=5
			def setSize(self,size):				 >>> r.size
				self.width, self.height=size		    (10, 5)
			def getSize(self):				 >>> r.getSize()
				return self.width,self.height		    (10, 5) 
        		size=property(getSize,setSize)	                 #实现size的双向访问
        			
创建类的实列函数--__init__():

不传递self--@staticmethod

类相等函数--__eq__()

类不相等函数--__ne__()

类大于函数--__gt__()

类小于函数--__lt__()

类大于等于函数--__gte__()

类小于等于函数--__lte__()

类打印字符串--__str__()

返回迭代器--__iter__()

生成器--yield

返回集合中所含项目的数量--__len__(self)

返回所给键对应的值--__getitem(self,key)

存储键值--__setitem__(self,key,value)

删除键--__delitem__(self,key)

子类化类--class 子类名称(父类名称):

调用父类函数--super()

检查已知类的基类--.__bases__

检查一个类是否是另一个类的子类--issubclass(子类名，父类名)

检查对象是否是一个类的实例--isinstance()

(基础148页)赋值函数--property()

检查对象是那个类的实列--.__class__ 





