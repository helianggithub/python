pyhon之Tkinter
　　



from Tkinter import *   #引用Tk模块python 2   from tkinter import *  #python 3
root = Tk()             #初始化Tk()
root.mainloop()         #进入消息循环


    几个常用属性

    title: 设置窗口标题
    geometry: 设置窗口大小
    resizable():设置窗口是否可以变化长 宽

from Tkinter import *
root = Tk()
root.title("hello world")
root.geometry('200x100')                 #是x 不是*
root.resizable(width=False, height=True) #宽不可变, 高可变,默认为True
root.mainloop()





常用控件：
    Label
    Frame
    Entry
    Text
    Button
    Listbox
    Scrollbar


                               说明每个控件最后要加上pack().否则控件是无法显示的.side=(LEFT,RIGHT,TOP,BOTTOM)


            pack方法提供了下列option选项，选项可以直接赋值或以字典变量加以修改：
            expand--当值为“yes”时，side选项无效。组件显示在父配件中心位置；若fill选项为”both”,则填充父组件的剩余空间。（默认值为“no”）

            fill--填充x(y)方向上的空间，当属性side=”top”或”bottom”时，填充x方向；当属性side=”left”或”right”时，填充”y”方向；当expand选项为”yes”          时，填充父组件的剩余空间。“x”, “y”, 两者都是-“both”

            ipadx, ipady--组件内部在x(y)方向上填充的空间大小，默认单位为像素，可选单位为c（厘米）、m（毫米）、i（英寸）、p（打印机的点，即1/27英寸），用法为         在值后加以上一个后缀既可。非负浮点数（默认值为0.0）

            padx, pady--组件外部在x(y)方向上填充的空间大小，默认单位为像素，可选单位为c（厘米）、m（毫米）、i（英寸）、p（打印机的点，即1/27英寸），用法为在        值后加以上一个后缀既可。非负浮点数（默认值为0.0）

            side--定义停靠在父组件的哪一边上。“top”, “bottom”, “left”, “right”（默认为”top”）
            before--将本组件于所选组建对象之前pack，类似于先创建本组件再创建选定组件。已经pack后的组件对象
            after--将本组件于所选组建对象之后pack，类似于先创建选定组件再本组件。已经pack后的组件对象
            in_--将本组件作为所选组建对象的子组件，类似于指定本组件的master为选定组件。已经pack后的组件对象
            anchor--对齐方式，左对齐”w”，右对齐”e”，顶对齐”n”，底对齐”s”“n”, “s”, “w”, “e”, “nw”, “sw”, “se”, “ne”, “center”
        (默认为” center”)





                                                  grid--按照格点（方格的形式来放置）


 Label(root,text='1').grid(row='行',column='列',padx=10,pady=10)    其中row-行，column-列，padx、pady用于填充显示，padx和pady用于设置框架的外部填充显示，                                                                     ipadx和ipady用于设置框架的内部显示。




                                                 place--能精确放置到某一坐标处


 Label(root,text='1').place(x=20,y=10,anchor='nw')   坐标




     
                                           Label()--用来显示文字和图片

     text--要显示的文本
     textvariable=var--绑定变量存储器，var=StringVar()
     justify--指示文字的对齐方向，可选值为RIGHT,CENTER,LEFT,默认Center
     padx--指定水平方向的边距，默认为1像素
     pady==指定竖直方向的边距，默认为1像素
     image--要显示的图片,图片格式.gif, 调用方法:a=PhotoImage(file='图片路径'), image=a
     compound=CENTER,可以同时显示图片和文字,属性:BOTTOM,LEFT,RIGHT,TOP,图片显示在相应的位置上
     bg--背景颜色
     fg--字体颜色
     font--(字体  大小 粗细)
     width--控件宽度
     height--控件高度
     config--能对所有的参数进行更改,l.config(text='要更改的值',bg='要更改的值',width='要更改的值')


             以下介绍的控件差不多都有这几个属性, 更详细的属性查看参考网页


举例
from Tkinter import *
root = Tk()
root.title("hello world")
root.geometry('300x200')
l = Label(root, text="show", bg="green", font=("Arial", 12), width=5, height=2)
l.pack(side=LEFT)  #这里的side可以赋值为LEFT  RiGHT TOP  BOTTOM
root.mainloop()



        
　　                                  Frame(根对象, [属性列表])--在屏幕上创建一块矩形区域,多作为容器来布局窗体

from Tkinter import *
root = Tk()
root.title("hello world")
root.geometry('300x200')
frm = Frame(root)                                             在主窗口定义一个框架（frm）
#left                                                         
frm_L = Frame(frm)                                            在框架内创建左侧标签（frm_L）
Label(frm_L, text='厚德', font=('Arial', 15)).pack(side=TOP)  创建‘厚德’标签
Label(frm_L, text='博学', font=('Arial', 15)).pack(side=TOP)  创建‘博学’标签
frm_L.pack(side=LEFT)                                         显示
#Right
frm_R = Frame(frm)                                            在框架内创建右侧标签（frm_R）
Label(frm_R, text='敬业', font=('Arial', 15)).pack(side=TOP)  创建‘敬业’标签
Label(frm_R, text='乐群', font=('Arial', 15)).pack(side=TOP)  创建‘乐群’标签
frm_R.pack(side=RIGHT)                                        显示
frm.pack()                                                    显示主框架
root.mainloop()




                                             Entry()--创建单行文本框

　　创建:lb =Entry(根对象, [属性列表])
　　var=StringVar()--绑定变量    
    lb=Entry(根对象, textvariable = var)
　　var.get()--获取文本框中的值
　　var.set()--设置文本框中的值  
    show--自定义Entry中的字符，列如:密码show='*',什么都不做:show=None 

举例
from Tkinter import *
root = Tk()
root.title("hello world")
root.geometry()
var = StringVar()
e = Entry(root, textvariable = var)
var.set("hello")
e.pack()
    
root.mainloop()



　　

                                           Text()--向该空间内输入文本

　　t = Text(根对象)

　　插入:t.insert(mark, 内容)

　　删除:t.delete(mark1, mark2)

　　其中,mark可以是行号,或者特殊标识,例如
    INSERT:光标的插入点CURRENT:鼠标的当前位置所对应的字符位置
    END:这个Textbuffer的最后一个字符
    SEL_FIRST:选中文本域的第一个字符，如果没有选中区域则会引发异常
    SEL_LAST：选中文本域的最后一个字符，如果没有选中区域则会引发 异常
    wrap='none'--设置文本不换行

举例
from Tkinter import *
root = Tk()
root.title("hello world")
root.geometry('300x200')

t = Text(root)
t.insert(1.0, 'hello\n')
t.insert(END, 'hello000000\n')
t.insert(END, 'nono')
t.pack()

root.mainloop()

　　


                                             Button()--创建按钮

　　Button(根对象, [属性列表])
         text--按钮名称
         width--按钮尺寸宽
         height--按钮尺寸高
         command--绑定事件函数
         quit--root.quit--退出
         destroy--root.destroy--退出


from Tkinter import *
root = Tk()
root.title("hello world")
root.geometry()

def printhello():
    t.insert('1.0', "hello\n")
    
t = Text()
t.pack()
Button(root, text="press", command = printhello).pack()
root.mainloop()

              


                                            Radiobutton--单选项

             Radiobutton(根对象,[参数列表])
             text--名称
             varivble=var--绑定变量
             value='A'--变量赋值
             command--绑定事件（函数）

var=StringVar()
r1=Radiobutton(root,text='Option A',variable=var,value='A',command=print_selection)




                                           Checkbutton--多选项
     
               var=IntVar()--定义var为整型
               variable=var--绑定var
               onvalue=1--选中时为1
               offvalue=0--未选中时为0
               command--绑定变量（函数）

var1=IntVar()
var2=IntVar()
c1=Checkbutton(root,text='python',variable=var1,onvalue=1,offvalue=0,command=print_selection)
c2=Checkbutton(root,text='c++',variable=var2,onvalue=1,offvalue=0,command=print_selection)
c1.pack()
c2.pack()

def print_selection():
     if var1.get()==1 and var2.get()==0:
          l.config(text='i love python')
     elif var1.get()==0 and var2.get()==1:
          l.config(text='i love c++')
     elif var1.get()==0 and var2.get()==0:
          l.config(text='i do not love either')
     elif var1.get()==1 and var2.get()==1:
          l.config(text='i love both')




                                        　           Scale--尺度

             label--名称
             from_--取值范围开始
             to--取值范围结束
             orient--横向或竖向(HORIZONTAL),(VERTICAL)
             length--显示的长度(单位像素)
             showvalue--是否显示所选中的数字,0不显示,1显示。
             tickinterval--显示的标签单位长度
             resolution--要保留的小数个数
             command--绑定变量(函数),函数是需要定义一个参数用于表示传入值def x(v):将v传入




                                                  Scrollbar--滚动条


    from Tkinter import *
    root = Tk()
    root.title('my root')
    root.geometry()
    s1=Scrollbar(root)                             创建滚动条1，默认为垂直
    s2=Scrollbar(root,orient=HORIZONTAL)           创建滚动条2，设置为横向
    t=Text(root,wrap='none',width=30,height=4)     创建不换行文本
    s1.pack(side='right',fill='y')                 显示垂直滚动条
    s2.pack(side='bottom',fill='x')                显示横向滚动条
    t.pack(side='left',fill='both')                显示文本
    s1.config(command=t.yview)                     跟文本y项绑定
    s2.config(command=t.xview)                     跟文本x项绑定
    t.config(yscrollcommand=s1.set)                文本跟滚动条绑定y项
    t.config(xscrollcommand=s2.set)                文本跟滚动条绑定x项
    q="HAMLE"
    t.insert(END,q)
    root.mainloop()










                                           Listbox()--列表控件,可以含有一个或多个文本想,可单选也可多选

用法

　　创建:lb = ListBox(根对象, [属性列表])
　　绑定变量 var=StringVar()    lb=ListBox(根对象, listvariable = var)
　　得到列表中的所有值   var.get()
　　设置列表中的所有值   var.set((item1, item2, .....))
　　添加:lb.insert(item)
　　删除:lb.delete(item,...)
　　绑定事件 lb.bind('<ButtonRelease-1>', 函数)
　　获得所选中的选项 lbl.get(lb.curselection())
属性

　　selectmode可以为BROWSE MULTIPL SINGLE


from Tkinter import *
root = Tk()
root.title("hello world")
root.geometry()

def print_item(event):
    print lb.get(lb.curselection())
    
var = StringVar()
lb = Listbox(root,  listvariable = var)
list_item = [1, 2, 3, 4]         #控件的内容为1 2 3 4
for item in list_item:
    lb.insert(END, item)
lb.delete(2, 4)                  #此时控件的内容为1 3

var.set(('a', 'ab', 'c', 'd'))   #重新设置了，这时控件的内容就编程var的内容了
print var.get()
lb.bind('<ButtonRelease-1>', print_item)
lb.pack()
    
root.mainloop()


                                    

                                            Canvas--画布，规定一片区域，可以放置图片、图形等等，并且可以把位置和形状进行改变


from Tkinter import *
  
root = Tk()
root.title('my root')
root.geometry()

c=Canvas(root,bg='black',heigh=400,width=650)                定义一个Canvas（为c,背景为黑色，尺寸400 X 650）
image_file=PhotoImage(file='1.gif')                          读取图片并存入到image_file中
image=c.create_image(10,10,anchor='nw',image=image_file)     通过create.image将图片放置到画布上。anchor意为锚点，即锚定的位置，
                                                             nw即为放置在左上角，图片最左上角的点放置的坐标应为所定义的10，10.
                                                             可选择的属性如下所示：

                                                                               |―――――――|
                                                                               |NW    N     NE| 
                                                                               |              |
                                                                               |W   CENTER   E|
                                                                               |              |
                                                                               |SW     S    SE|
                                                                               |―――――――|

x0,y0,x1,y1=90,90,120,120                                    定义坐标
line=c.create_line(x0,y0,x1,y1)                              create_line从坐标为（90，90）到（120，120）绘制一条直线。
oval=c.create_oval(x0,y0,x1,y1,fill='yellow')                create-oval为绘制圆形，fill填充颜色。
arc=c.create_arc(x0+30,y0+30,x1+30,y1+30,start=0,extent=200,fill='green')
                                                             create_arc为绘制扇形，start和extent表示该扇形从0°到180°。
rect=c.create_rectangle(100,30,100+50,30+50)                 create_rectangle为绘制一个正方形。
c.pack()

def moveit():                                                定义一个button，该按钮的作用是每点击一次，rect对象，即为所绘制的正方形下移两格，moveit函数中0表示x方向的位移为0，2为y方向上                                 的位移变化尺度
     c.move(rect,0,2)
b=Button(root,text='move',command=moveit).pack()

root.mainloop()




                                           Scrollbar()--在屏幕上创建一块矩形区域,多作为容器来布局窗体

root = Tk()
root.title("hello world")
root.geometry()

def print_item(event):
    print lb.get(lb.curselection())
    
var = StringVar()
lb = Listbox(root, height=5, selectmode=BROWSE, listvariable = var)
lb.bind('<ButtonRelease-1>', print_item)
list_item = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
for item in list_item:
    lb.insert(END, item)
    
scrl = Scrollbar(root)
scrl.pack(side=RIGHT, fill=Y)
lb.configure(yscrollcommand = scrl.set)
lb.pack(side=LEFT, fill=BOTH)
scrl['command'] = lb.yview

root.mainloop()




 
                                                                Menubar--菜单选项
　

from Tkinter import *
counter=0
def do_job():                 绑定的函数，点击加一
     global counter
     l.config(text='do'+str(counter))
     counter+=1
root = Tk()
root.title('my root')
root.geometry('400x300')
l=Label(root,text='',bg='yellow')
l.pack()

menubar=Menu(root)                                        在窗口root上定义一个Menu，（menubar）
filemenu=Menu(menubar,tearoff=0)                          在menubar上定义一个Menu,（filemenu）
menubar.add_cascade(label='File',menu=filemenu)           创建File选项，此时的Menu是放置在menubar上的，并通过add_cascade（cascade：级联）放置在menubar上
filemenu.add_command(label='New',command=do_job)          在File选项中，增加New
filemenu.add_command(label='Open',command=do_job)         在File选项中，增加Open
filemenu.add_separator()                                  在File选项中，增加分隔线
filemenu.add_command(label='Exit',command=root.destroy)   在File选项中，增加Exit，功能退出

submenu=Menu(filemenu)                                    在File选项中，创建多级选项，一级为（Import）,二级为（Submenul）
filemenu.add_cascade(label='Import',menu=submenu,underlin=0)
submenu.add_command(label='Submenul',command=do_job)

editmenu=Menu(menubar,tearoff=0)                           创建File同级菜单，（Edit）
menubar.add_cascade(label='Edit',menu=editmenu)            
editmenu.add_command(label='Cut',command=do_job)           在Edit选项中，增加Cut
editmenu.add_command(label='Copy',command=do_job)          在Edit选项中，增加Copy

root.config(menu=menubar)                                  配置显示菜单
root.mainloop()






                                                               messagebox--弹窗



from Tkinter import *
import tkMessageBox                                                  导入tkMessageBox,（python3.0以后，messagebox归入tkinter模块）
root = Tk()
root.title('my root')
root.geometry('400x300')
Button(root,text='hit me',command=hit_me).pack()                     创建按钮
def hit_me():
     #tkMessageBox.showinfo(title='Hi',message='hehehehe')           点击按钮弹出圆形感叹号
     #tkMessageBox.showwarning(title='Hi',message='nihao')           点击按钮弹出三角形黄色感叹号
     #tkMessageBox.showerror(title='Hi',message='hehehehe')          点击按钮弹出圆形错误符号
     #print tkMessageBox.askquestion(title='Hi',message='nihao')     点击按钮返回'YES'或'NO'
     #print tkMessageBox.askyesno(title='Hi',message='nihao')        点击按钮返回'True'或'False'			
     #print tkMessageBox.askokcancel(title='Hi',message='nihao')     点击按钮返回'True'或'False'
     print tkMessageBox.askyesnocancel(title='Hi',message='nihao')   点击按钮返回'True'、'False'或'None'
 
root.mainloop()




















　　