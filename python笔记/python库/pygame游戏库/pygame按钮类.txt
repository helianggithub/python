#coding:gbk

import pygame.font

class Button():
    """创建按钮"""
    
    def __init__(self,settings,screen,msg):
        """初始化按钮的属性"""
        self.screen = screen                                              #初始化好的屏幕实例
        self.screen_rect = screen.get_rect()                              #得到屏幕实例矩形
        #设置按钮的尺寸和其他属性
        self.width,self.height = 200,50                                   #按钮尺寸   
        self.button_color = (255,0,0)                                     #按钮背景颜色
        self.text_color = (255,255,255)                                   #按钮文字颜色
        self.font = pygame.font.SysFont(None,48)                          #按钮字体None--默认字体，48字体大小
        #创建按钮的rect对象，并使其居中                
        self.rect = pygame.Rect(0,0,self.width,self.height)               #按钮rect对象
        self.rect.center = self.screen_rect.center                        #按钮居中
        #按钮的标签只需创建一次
        self.prep_msg(msg)                                                #初始化渲染按钮函数，msg为需要显示的文字
        
    def prep_msg(self,msg):
        """将msg渲染为图像，并使其在按钮上居中"""
        self.msg_image = self.font.render(msg,True,self.text_color,       #把字符msg渲染为图像，存储在msg_image中，True打开反锯齿功能，让文字显示边缘更平滑
        self.button_color)                                                 text_color文字显示颜色,button_color文字背景颜色，不指定将以透明方式渲染
        self.msg_image_rect = self.msg_image.get_rect()                   #得到文字rect
        self.msg_image_rect.center = self.rect.center                     #将文字居中
        
    def draw_button(self):
        """绘制一个用颜色填充的按钮，再绘制文本"""
        self.screen.fill(self.button_color,self.rect)                     #绘制按钮块
        self.screen.blit(self.msg_image,self.msg_image_rect)              #绘制文字

实例.rect.collidepoint(mouse_x,mouse_y)                                   #collidepoint()函数检查坐标mouse_x,mouse_y是否在某个实例的rect范围内