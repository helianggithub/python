import multiprocessing as mp


                                   需要放入if __name__=="__main__":里面，否则会报错,或没有响应

def job(q):
    res=0
    for i in range(1000000):
        res+=i+i**2+i**3
    q.put(res)                               #需要返回的值

if __name__=='__main__':                      
    time.clock()                             #测试程序时间开始
    q=mp.Queue()                             #调用返回值函数
    p1=mp.Process(target=job,args=(q,))      #创建进程1，args--需要传递的参数，传递q时后面必须加,号
    p2=mp.Process(target=job,args=(q,))
    p1.start()                               #开始进程1
    p2.start()                               #开始进程2
    p1.join()                                #链接进程1，运行完后再运行下面的程序
    p2.join()                                #链接进程2，运行完后再运行下面的程序
    res1=q.get()                             #取出返回值
    res2=q.get()                             #取出返回值，运行了两次，所以取两次值
    print res1+res2
    print time.clock()                       #打印出程序运行时间



                          mp.Pool()--进程池，传入数据自动分配给每个cpu计算
def job(x):
    return x*x
def multicore():
    p=mp.Pool(processes=2)                   #创建进程池，processes=2 用几个cpu来处理程序，默认全开
    res=p.map(job,range(10))                 #p.map()--返回计算完的列表
    print res                                
    res=p.apply_async(job,(2,))              #p.apply_async()--返回单个的结果，输入参数后面要加,号
    print res.get()
    multi_res=[p.apply_async(job,(i,)) for i in range(10)]   #p.apply_async()--列表迭代版
    print [res.get() for res in multi_res]                   #p.apply_async()--列表迭代输出
if __name__=='__main__':
    multicore()


                         mp.Value()--cpu之间共享内存
                v=mp.Value('d',1)        #定义共享内存，d--定义的值的形式，1--定义的值    
                a=mp.Array('i',[1,2,3])  #定义共享内存，i--定义的值的形式，[1,2,3]--定义的值
                | Type code | C Type             | Python Type           | Minimum size in bytes |
                | --------- | ------------------ | --------------------- | --------------------- |
                | `'b'`     | signed char        | int      整数         | 1                     |
                | `'B'`     | unsigned char      | int      整数         | 1                     |
                | `'u'`     | Py_UNICODE         | Unicode character     | 2                     |
		| `'h'`     | signed short       | int      整数         | 2                     |
		| `'H'`     | unsigned short     | int      整数         | 2                     |
		| `'i'`     | signed int         | int      整数         | 2                     |
		| `'I'`     | unsigned int       | int      整数         | 2                     |
		| `'l'`     | signed long        | int      整数         | 4                     |
		| `'L'`     | unsigned long      | int      整数         | 4                     |
		| `'q'`     | signed long long   | int      整数         | 8                     |
		| `'Q'`     | unsigned long long | int      整数         | 8                     |
		| `'f'`     | float              | float    浮点数       | 4                     |
		| `'d'`     | double             | float    浮点数       | 8                     |



                         mp.lock()--进程锁，锁住线程等现在的程序运行完，再运行其他程序
                l=mp.Lock()                  #调用线程锁
                def job1():
                    l.acquire()              #开始锁住线程运行程序
                    for i in range(10):
                             A+=1
                             print 'job1',A
                    l.release()              #打开线程锁

     



































