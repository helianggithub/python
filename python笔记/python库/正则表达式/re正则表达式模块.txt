import re                #内置模块


>>> p = r'[\u4e00-\u9fa5]+'                  #匹配一个到多个任意汉字

>>> re.findall(p,s)                          #匹配字符集中的所有匹配项，p表示正则语句(p=r"r[A-Z]n"),s表示字符集(s="dog runs to cat").


>>> re.search(p,s,flags=re.M)　　　　　　　   #匹配字符集中找到第一项，p表示正则语句(p=r"r[A-Z]n"),s表示字符集(s="dog runs to cat").
                                             字符串有多行的话，（flags=re.M或写成 flags=re.MULTILINE）参数表示每一行单独处理
>>> .group()                                 #用()进行分组，使用group()找到分组内容，可以加参数(1),(2)
>>> p = re.search(r"(\d+), Date: (.+)", "ID: 021523, Date: Feb/12/2017")
>>> print(p.group())      # 021523, Date: Feb/12/2017
>>> print(p.group(1))     # 021523
>>> print(p.group(2))     # Date: Feb/12/2017

>>> re.findall(r"(run|ran)", "run ran ren")   # | 表示or，不是前面就是后面
>>> ['run','ran']


>>> ?p<名字>                                  #给每个组定义名字，方便查找
>>> p = re.search(r"(?P<id>\d+), Date: (?P<date>.+)", "ID: 021523, Date: Feb/12/2017")
>>> print(p.group('id'))    # 021523
>>> print(p.group('date'))  # Date: Feb/12/2017       



>>> re.sub()                                  #找到匹配字符串后替换掉
>>> re.sub(p,t,s)                             #p=r'正则语句' t='要替换的字符' s='字符串' 
>>> print(re.sub(r"r[au]ns", "catches", "dog runs to cat"))     # dog catches to cat

                     
>>> re.split()                                #分割字符串
>>> print(re.split(r"[,;\.]", "a;b,c.d;e"))   # ['a', 'b', 'c', 'd', 'e']



>>> re.compile(P, flags)                      #将正则表达式编译为模式对象。p=r'正则语句' ,第二个参数flag是匹配模式，取值可以使用按位或
                                               运算符'|'表示同时生效，比如re.I | re.M,另外，你也可以在regex字符串中指定模式，
                                               比如re.compile(p,re.I | re.M)与re.compile('(?im)p')是等价的。
>>> p= re.compile(r"r[ua]n")
>>> print(p.search("dog ran to cat")) # <_sre.SRE_Match object; span=(4, 7), match='ran'>
       
                                              #可选值有：
                                               re.I(re.IGNORECASE)--忽略大小写（括号内是完整写法，下同）
                                               M(MULTILINE)--多行模式，改变'^'和'$'的行为
                                               S(DOTALL)--使 "." 特殊字符完全匹配任何字符，包括换行；没有这个标志， "." 匹配除了换行外的任何字符。
                                               L(LOCALE)--使预定字符类 \w \W \b \B \s \S 取决于当前区域设定
                                               U(UNICODE)--使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性
                                               X(VERBOSE)--详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。
以下两个正则表达式是等价的：
>>> a = re.compile(r"""\d +  # the integral part
                       \.    # the decimal point
                       \d *  # some fractional digits""", re.X)
>>> b = re.compile(r"\d+\.\d*")
                          

>>> re.escape(t)                             #将字符串t中的*/+/?等之前加上转义符再返回


                                   m是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用re提供的可读属性或方法来获取这些信息。

       属性：
            string: 匹配时使用的文本。
            re: 匹配时使用的Pattern对象。
            pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。
            endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。
            lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。
            lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。
       方法：
            group()--返回匹配的字符串，可以添加分组别名查找。
            groups([default])--以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。
            groupdict([default])--返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。
            m.start()--返回开始的位置 
            m.end()-- 返回结束的位置
            m.span()-- 返回一个元组包含匹配 (开始,结束) 的位置

            expand(template)--将匹配到的分组代入template中然后返回。template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。\id与\g<id>是等价的；但         \10将被认为是第10个分组，如果你想表达\1之后是字符'0'，只能使用\g<1>0。

                    import re
                    m = re.findall(r'(\w+) (\w+)(?P<sign>.*)', 'hello world!')
                    print "m.string:", m.string
                    print "m.re:", m.re
                  # m.string: hello world!
                  # m.re: <_sre.SRE_Pattern object at 0x016E1A38>
                  # m.pos: 0
                  # m.endpos: 12
                  # m.lastindex: 3
                  # m.lastgroup: sign
                  # m.group(1,2): ('hello', 'world')
                  # m.groups(): ('hello', 'world', '!')
                  # m.groupdict(): {'sign': '!'}
                  # m.start(2): 6
                  # m.end(2): 11
                  # m.span(2): (6, 11)
                  # m.expand(r'\2 \1\3'): world hello!




                                      P是一个编译好的正则表达式，通过re提供的一系列方法可以对文本进行匹配查找.p=re.compile(r.'...')

            P不能直接实例化，必须使用re.compile()进行构造。
            P提供了几个可读属性用于获取表达式的相关信息：

            pattern: 编译时用的表达式字符串。
            flags: 编译时用的匹配模式。数字形式。
            groups: 表达式中分组的数量。
            groupindex: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。
                  import re
                  p = re.compile(r'(\w+) (\w+)(?P<sign>.*)', re.DOTALL)
                  print "p.pattern:", p.pattern
                  print "p.flags:", p.flags
                  print "p.groups:", p.groups
                  print "p.groupindex:", p.groupindex
                # p.pattern: (\w+) (\w+)(?P<sign>.*)
                # p.flags: 16
                # p.groups: 3
                # p.groupindex: {'sign': 3}




                                       模式中的逆向引用允许你指定先前捕获组的内容，该组也必须在字符串当前位置被找到。举个例子，如果组 1 的内容能够在当前位置                                     找到的话，\1 就成功否则失败。记住 Python 字符串也是用反斜杠加数据来允许字符串中包含任意字符的，所以当在 RE 中使用逆向引用                                     时确保使用 raw 字符串。

           下面的 RE 在一个字符串中找到成双的词。
                 p = re.compile(r'(\b\w+)\s+\1')
                 p.search('Paris in the the spring').group()
               # 'the the





































